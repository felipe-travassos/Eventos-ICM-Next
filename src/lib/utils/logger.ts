/**
 * Sistema de logging centralizado com controle granular
 * Permite desabilitar logs espec√≠ficos via vari√°veis de ambiente
 */

// Configura√ß√µes de ambiente
const isDevelopment = process.env.NODE_ENV === 'development';
const isDebugEnabled = process.env.NEXT_PUBLIC_DEBUG_LOGS === 'true';
const isSyncLogsEnabled = process.env.NEXT_PUBLIC_ENABLE_SYNC_LOGS === 'true';

export const logger = {
  // Logs de informa√ß√£o (apenas em desenvolvimento se DEBUG_LOGS estiver habilitado)
  info: (message: string, ...args: unknown[]) => {
    if (isDevelopment && isDebugEnabled) {
      console.log(message, ...args);
    }
  },

  // Logs de sincroniza√ß√£o (controlados por ENABLE_SYNC_LOGS)
  syncingEvents: () => {
    if (isDevelopment && isSyncLogsEnabled) {
      console.log('üîÑ Iniciando sincroniza√ß√£o de eventos...');
    }
  },

  syncCompleted: () => {
    if (isDevelopment && isSyncLogsEnabled) {
      console.log('‚úÖ Sincroniza√ß√£o de eventos conclu√≠da');
    }
  },

  eventCorrected: (eventId: string, currentParticipants: number) => {
    if (isDevelopment && isSyncLogsEnabled) {
      console.log(`üîß Evento ${eventId} corrigido: ${currentParticipants} participantes`);
    }
  },

  // Logs de carregamento de dados
  loadingEvents: () => {
    if (isDevelopment && isDebugEnabled) {
      console.log('üîÑ Carregando eventos...');
    }
  },

  eventsLoaded: (count: number) => {
    if (isDevelopment && isDebugEnabled) {
      console.log('üéØ Eventos carregados:', count);
    }
  },

  eventsLoadedWithSync: (count: number) => {
    if (isDevelopment && isDebugEnabled) {
      console.log('üéØ Eventos carregados com sincroniza√ß√£o:', count);
    }
  },

  loadingUserRegistrations: (userId: string) => {
    if (isDevelopment && isDebugEnabled) {
      console.log('üîÑ Carregando inscri√ß√µes para usu√°rio:', userId);
    }
  },

  userRegistrationsLoaded: (registrations: unknown[]) => {
    if (isDevelopment && isDebugEnabled) {
      console.log('üìã Inscri√ß√µes carregadas:', registrations);
    }
  },

  userNotLoggedIn: () => {
    if (isDevelopment && isDebugEnabled) {
      console.log('üë§ Usu√°rio n√£o logado, limpando inscri√ß√µes');
    }
  },

  autoUpdatingEvents: () => {
    if (isDevelopment && isDebugEnabled) {
      console.log('üîÑ Atualizando eventos automaticamente...');
    }
  },

  registrationsUpdatedAfterEvent: (registrations: unknown[]) => {
    if (isDevelopment && isDebugEnabled) {
      console.log('üîÑ Inscri√ß√µes atualizadas ap√≥s registro:', registrations);
    }
  },

  // Logs de warning (sempre exibidos em desenvolvimento)
  warn: (message: string, ...args: unknown[]) => {
    if (isDevelopment) {
      console.warn(message, ...args);
    }
  },

  // Logs de erro (sempre exibidos)
  error: (message: string, ...args: unknown[]) => {
    console.error(message, ...args);
  },

  // Logs de debug espec√≠ficos (apenas se DEBUG_LOGS estiver habilitado)
  debug: (message: string, ...args: unknown[]) => {
    if (isDevelopment && isDebugEnabled) {
      console.log(`[DEBUG] ${message}`, ...args);
    }
  }
};

// Exportar tamb√©m como default
export default logger;